from time import sleep
import random 
class MoviePortalGame:
    # Initialize the game with the player's name and starting points
    def __init__(self, name: str, points: int):
        self.points = points
        self.portalpieces = []  # List to track collected portal pieces
        self.second_portal_piece = "Portal piece of the second world"  # Portal piece for this world
        print("\nIndiana Jones has been transported into The Matrix! To return to his world, he must earn 100 points and collect the portal piece for this world.\n")
        sleep(1)
        self.choose_world()

    # Main menu for choosing the world or exiting the game
    def choose_world(self):
        while True:
            print("\nWhich simulation do you want to enter?")
            print("1. The Matrix World")
            print("2. Exit simulation")
            choice = input("Enter your choice (1/2): ")
            
            if choice == "1":
                self.second_world()
            elif choice == "2":
                print("Thanks for playing! Goodbye.")
                break
            else:
                print("Invalid choice, please try again.")
    
    # Main function for The Matrix world
    def second_world(self):
        # Check if player has already earned the portal piece
        if self.second_portal_piece in self.portalpieces:
            user_input = input("You've already completed this world. If you start again, you will have to earn this portal piece again. Do you want to continue? (y/n): ")
            if user_input.lower() == "n":
                return
            elif user_input.lower() == "y":
                self.portalpieces.remove(self.second_portal_piece)
        
        print("\nIndiana Jones wakes up in a dark city alley, neon lights flickering above. A mysterious figure in a trench coat approaches him.")
        sleep(2)
        print("'Welcome to The Matrix. You need to make a choice if you want to survive.'")
        sleep(3)
       
        self.choose_door()
        
        # Check if enough points are collected for the portal piece
        if self.points >= 100:
            print("\nCongratulations! Indiana Jones has collected enough points and earned another portal piece to get closer to going home")
            self.portalpieces.append(self.second_portal_piece) #Add element to portal pieces list
        else:
            print("\nYou haven't collected enough points yet. Try again!")
            self.second_world()

    # Function to choose an action by selecting a coloured door
    def choose_door(self):
        while True:
            print("\nIn front of you are four doors:")
            print("1. A Blue Door")
            print("2. A Yellow Door")
            print("3. A Green Door")
            choice = input("Which door do you enter? (1/2/3): ")
            
            if choice == "1":
                self.subway_shootout()
            elif choice == "2":
                self.indiana_vs_agent_smith_fight()
            elif choice == "3":
                self.code_hacking_game()
            else:
                print("Invalid choice, please select a valid door.")
    
    # Subway Shootout
    def subway_shootout(self):
        print("\nIndiana Jones enters a subway station. Suddenly, an agent appears, and the only way out is through him!")
        sleep(1)
        ammo = 5  # Starting bullets
        enemy_health = 2  # Reduced enemy health for a quicker fight
        while ammo > 0 and enemy_health > 0:
            action = input("Do you shoot (s), dodge (d), or find cover (c)? ")
            if action.lower() == "s" and random.choices([True, False], weights=[70, 30])[0]:
                print("You fire a shot! The agent dodges but gets grazed!")
                enemy_health -= 1
                self.points += 10
                ammo -= 1
            elif action.lower() == "d" and random.choices([True, False], weights=[70, 30])[0]:
                print("Indiana dodges the agent's bullet, moving in bullet-time!")
            elif action.lower() == "c" and random.choices([True, False], weights=[70, 30])[0]:
                print("You take cover and reload your gun!")
                ammo = 5
            else:
                print("The agent fires back! You take a hit!")
                ammo -= 1
        if enemy_health <= 0:
            print("You take down the agent and escape! Extra points awarded!")
            self.points += 30
        else:
            print("You ran out of ammo! The agent eliminates you! Try again.")
            self.subway_shootout()

    # Indiana Jones vs Agent Smith Fight
    def indiana_vs_agent_smith_fight(self):
        print("\nIndiana Jones steps onto a rooftop. Agent Smith stands before him, sunglasses gleaming.")
        sleep(1)
        health = 3  # Indiana's health
        enemy_health = 2  # Reduced enemy health
        while health > 0 and enemy_health > 0:
            action = input("Do you attack (a), dodge (d), or use bullet time (b)? ")
            if action.lower() == "a" and random.choices([True, False], weights=[70, 30])[0]: #Adds randomness to the game 70/30 choosing right one
                print("Indiana lands a punch! Agent Smith stumbles!")
                enemy_health -= 1
                self.points += 10
            elif action.lower() == "d" and random.choices([True, False], weights=[70, 30])[0]:
                print("Indiana dodges an attack gracefully!")
            elif action.lower() == "b" and random.choices([True, False], weights=[70, 30])[0]:
                print("Indiana slows time and lands a perfect strike!")
                enemy_health -= 2
                self.points += 20
            else:
                print("Agent Smith lands a hit! Be careful!")
                health -= 1
        if health > 0:
            print("You win the battle and earn extra points!")
            self.points += 30
        else:
            print("You have been defeated! Try again.")
            self.indiana_vs_agent_smith_fight()
            
    # Code for hacking game with multiple challenges and a interaction with a Matrix character
    def code_hacking_game(self):
        print("\nAs you approach the console, a dark figure appears from the shadows.")
        sleep(2)
        print("It's Trinity. She nods at you and says, 'You need to act fast, the Agents are tracking us.'")
        sleep(2)
        print("'The system is heavily encrypted. You'll need to bypass multiple security layers.'")
        sleep(2)
        print("She hands you a small device. 'Use this decryption key wisely, but you'll still need to prove yourself.'")
        sleep(2)
        print("'Would you want to help me out to hack the system and earn points for your portal piece?'")
        sleep(1)
        response = input("Will you help? (y/n): ").lower()
        if response == 'n':
            print("Trinity shakes her head. 'Then weâ€™re all doomed.' The simulation resets.")
            sleep(2)
            go_back = input("Do you want to go back to the main menu? (y/n): ").lower()
            if go_back == 'y':
                self.choose_world()
                return
            else:
                print("Trinity sighs. 'Alright, let's try another way.'")
                self.morpheus_jump_challenge()
                return
        elif response == 'y':
            print("Trinity nods. 'Alright, let's do this.'")
        sleep(3)

        print("You sit before a console. The Matrix code scrolls rapidly.")
        sleep(2)
        print("To hack the system, you must complete multiple challenges.")
        sleep(2)
        
         # First challenge: Disable the Security System
        print("Challenge 1: Disable the Security System")
        print("Before hacking the system, you must bypass a security firewall by cutting the right wire.")
        print("You see three wires: Red, Blue, and Green.")
        correct_wire = random.choice(["Red", "Blue", "Green"])
        
        while True:
            user_wire = input("Which wire do you cut? (Red/Blue/Green) (Type 'hint' for help): ").capitalize()
            if user_wire.lower() == "hint":
                if correct_wire == "Red":
                    print("Hint: The correct wire is the color of danger but also sometimes luck.")
                elif correct_wire == "Blue":
                    print("Hint: The correct wire is the color of the pill Neo took.")
                else:
                    print("Hint: The correct wire is the color of nature and the Matrix code.")
                continue
            
            if user_wire == correct_wire:
                print(f"You cut the {user_wire} wire... and the security system is disabled!")
                break
            else:
                print("Wrong wire! The system resets. Try again!")
                return
        
        print("Security system bypassed! Moving to the next challenge...")
        sleep(2)
              
    #Second challenge: Guess the Word
        print("\nChallenge 2: Guess the Word")
        print("A scrambled code appears on the screen. It contains a hidden word you must decode.")
        word_letters = list("MATRIX")
        random.shuffle(word_letters) #will random shuffle the letters
        scrambled_word = ''.join(word_letters) #prints eventually the scrambled_word
        print(f"The scrambled word is: {scrambled_word}")
        
        while True:
            user_guess = input("Enter the correct word (Type 'hint' for help): ").upper()
            if user_guess == "HINT":
                print("Hint: The word is the name of the simulation you are trapped in.")
                continue
            if user_guess == "MATRIX":
                print("Correct! You have deciphered the hidden word.")
                break
            else:
                print("Incorrect! Try again.")
        
        print("You correctly guessed the word! Moving to the next challenge...")
        sleep(2)
      
    
    #Third challenge: Logic puzzle with fight interaction

# Prompt the user to choose a weapon
print("You must act fast so you prepare for a battle! Choose your weapon:")
print("1. A metal pipe")
print("2. Your fists")
print("3. A nearby keyboard")
weapon = input("Choose your weapon (1/2/3): ")

# Handle the user's choice
    if weapon == '1':
    print("You swing the metal pipe and hit your opponent on the head, knocking them unconscious!")
    elif weapon == '2':
    print("You engage in hand-to-hand combat and manage to land a strong punch, knocking them out!")
    elif weapon == '3':
    print("You grab the keyboard and smash it over their head, rendering them unconscious!")
    else:
    print("You hesitate for too long, and the intruder overpowers you. The system resets!")
    exit()

print("With your opponent down, you quickly return to hacking the system!")
sleep(2)

# Transition to the next challenge
print("\nWith the intruder knocked out, you quickly move on to the next challenge.")
sleep(2)
print("You see a panel with three switches labeled A, B and C")
sleep(2)
print("Only one correct combination will disable the final firewall and allow you to finish hacking the system.")
correct_combination = random.choice(["A", "B", "C"])

# Loop until the correct switch is chosen
while True:
    switch_choice = input("Which switch do you activate? (A/B/C): ").upper()
    if switch_choice == correct_combination:
        print("The system unlocks! You've successfully hacked The Matrix!")
        break
    else:
        print("Incorrect switch! The system resets. Try again!")

            
        print("\nWith the intruder knocked out, you quickly move on to the next challenge.")
        sleep(2)
        print("You see a panel with three switches labeled A, B and C")
        sleep(2)
        print("Only one correct combination will disable the final firewall and allow you to finish hacking the system.")
        correct_combination = random.choice(["A", "B", "C"])
        while True:
            switch_choice = input("Which switch do you activate? (A/B/C): ").upper()
            if switch_choice == correct_combination:
                print("The system unlocks! You've successfully hacked The Matrix!")
                self.points += 50
                break
            else:
                print("Incorrect switch! The system resets. Try again!")

# Start the game when the script runs
if __name__ == "__main__":
    player_name = input("Enter your name: ")
    game = MoviePortalGame(name=player_name, points=0)
